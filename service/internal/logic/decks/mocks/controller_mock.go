// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rmarken/reptr/service/internal/logic/decks (interfaces: Controller)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/controller_mock.go -package logic . Controller
//

// Package logic is a generated GoMock package.
package logic

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/rmarken/reptr/service/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// AddCardToDeck mocks base method.
func (m *MockController) AddCardToDeck(arg0 context.Context, arg1 string, arg2 models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCardToDeck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCardToDeck indicates an expected call of AddCardToDeck.
func (mr *MockControllerMockRecorder) AddCardToDeck(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCardToDeck", reflect.TypeOf((*MockController)(nil).AddCardToDeck), arg0, arg1, arg2)
}

// AddDeckToGroup mocks base method.
func (m *MockController) AddDeckToGroup(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeckToGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeckToGroup indicates an expected call of AddDeckToGroup.
func (mr *MockControllerMockRecorder) AddDeckToGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeckToGroup", reflect.TypeOf((*MockController)(nil).AddDeckToGroup), arg0, arg1, arg2)
}

// CreateDeck mocks base method.
func (m *MockController) CreateDeck(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeck", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeck indicates an expected call of CreateDeck.
func (mr *MockControllerMockRecorder) CreateDeck(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeck", reflect.TypeOf((*MockController)(nil).CreateDeck), arg0, arg1, arg2)
}

// CreateGroup mocks base method.
func (m *MockController) CreateGroup(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockControllerMockRecorder) CreateGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockController)(nil).CreateGroup), arg0, arg1, arg2)
}

// DownvoteDeck mocks base method.
func (m *MockController) DownvoteDeck(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownvoteDeck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownvoteDeck indicates an expected call of DownvoteDeck.
func (mr *MockControllerMockRecorder) DownvoteDeck(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvoteDeck", reflect.TypeOf((*MockController)(nil).DownvoteDeck), arg0, arg1, arg2)
}

// GetBackOfCardByID mocks base method.
func (m *MockController) GetBackOfCardByID(arg0 context.Context, arg1, arg2, arg3 string) (models.BackOfCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackOfCardByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.BackOfCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackOfCardByID indicates an expected call of GetBackOfCardByID.
func (mr *MockControllerMockRecorder) GetBackOfCardByID(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackOfCardByID", reflect.TypeOf((*MockController)(nil).GetBackOfCardByID), arg0, arg1, arg2, arg3)
}

// GetCardsByDeckID mocks base method.
func (m *MockController) GetCardsByDeckID(arg0 context.Context, arg1 string) (models.DeckWithCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardsByDeckID", arg0, arg1)
	ret0, _ := ret[0].(models.DeckWithCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardsByDeckID indicates an expected call of GetCardsByDeckID.
func (mr *MockControllerMockRecorder) GetCardsByDeckID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardsByDeckID", reflect.TypeOf((*MockController)(nil).GetCardsByDeckID), arg0, arg1)
}

// GetDecks mocks base method.
func (m *MockController) GetDecks(arg0 context.Context, arg1 time.Time, arg2 *time.Time, arg3, arg4 int) ([]models.DeckWithCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecks", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.DeckWithCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecks indicates an expected call of GetDecks.
func (mr *MockControllerMockRecorder) GetDecks(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecks", reflect.TypeOf((*MockController)(nil).GetDecks), arg0, arg1, arg2, arg3, arg4)
}

// GetFrontOfCardByID mocks base method.
func (m *MockController) GetFrontOfCardByID(arg0 context.Context, arg1, arg2, arg3 string) (models.FrontOfCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrontOfCardByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.FrontOfCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrontOfCardByID indicates an expected call of GetFrontOfCardByID.
func (mr *MockControllerMockRecorder) GetFrontOfCardByID(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrontOfCardByID", reflect.TypeOf((*MockController)(nil).GetFrontOfCardByID), arg0, arg1, arg2, arg3)
}

// GetGroupByID mocks base method.
func (m *MockController) GetGroupByID(arg0 context.Context, arg1 string) (models.GroupWithDecks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", arg0, arg1)
	ret0, _ := ret[0].(models.GroupWithDecks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByID indicates an expected call of GetGroupByID.
func (mr *MockControllerMockRecorder) GetGroupByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockController)(nil).GetGroupByID), arg0, arg1)
}

// GetGroups mocks base method.
func (m *MockController) GetGroups(arg0 context.Context, arg1 time.Time, arg2 *time.Time, arg3, arg4 int) ([]models.GroupWithDecks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.GroupWithDecks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockControllerMockRecorder) GetGroups(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockController)(nil).GetGroups), arg0, arg1, arg2, arg3, arg4)
}

// GetGroupsForUser mocks base method.
func (m *MockController) GetGroupsForUser(arg0 context.Context, arg1 string, arg2 time.Time, arg3 *time.Time, arg4, arg5 int) ([]models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsForUser", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsForUser indicates an expected call of GetGroupsForUser.
func (mr *MockControllerMockRecorder) GetGroupsForUser(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsForUser", reflect.TypeOf((*MockController)(nil).GetGroupsForUser), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RemoveDownvoteDeck mocks base method.
func (m *MockController) RemoveDownvoteDeck(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDownvoteDeck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDownvoteDeck indicates an expected call of RemoveDownvoteDeck.
func (mr *MockControllerMockRecorder) RemoveDownvoteDeck(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDownvoteDeck", reflect.TypeOf((*MockController)(nil).RemoveDownvoteDeck), arg0, arg1, arg2)
}

// RemoveUpvoteDeck mocks base method.
func (m *MockController) RemoveUpvoteDeck(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUpvoteDeck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUpvoteDeck indicates an expected call of RemoveUpvoteDeck.
func (mr *MockControllerMockRecorder) RemoveUpvoteDeck(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUpvoteDeck", reflect.TypeOf((*MockController)(nil).RemoveUpvoteDeck), arg0, arg1, arg2)
}

// UpdateCard mocks base method.
func (m *MockController) UpdateCard(arg0 context.Context, arg1 models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockControllerMockRecorder) UpdateCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockController)(nil).UpdateCard), arg0, arg1)
}

// UpvoteDeck mocks base method.
func (m *MockController) UpvoteDeck(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvoteDeck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpvoteDeck indicates an expected call of UpvoteDeck.
func (mr *MockControllerMockRecorder) UpvoteDeck(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvoteDeck", reflect.TypeOf((*MockController)(nil).UpvoteDeck), arg0, arg1, arg2)
}

// VoteCard mocks base method.
func (m *MockController) VoteCard(arg0 context.Context, arg1 models.Vote, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteCard", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// VoteCard indicates an expected call of VoteCard.
func (mr *MockControllerMockRecorder) VoteCard(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteCard", reflect.TypeOf((*MockController)(nil).VoteCard), arg0, arg1, arg2, arg3)
}
