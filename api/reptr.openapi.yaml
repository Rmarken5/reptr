openapi: 3.1.0
info:
  title: Reptr API
  description: Reptr API Documentation
  version: 1.0.0
servers:
  - url: http://localhost:8081/
paths:
  /login:
    get:
      operationId: loginPage
      summary: serve login page
      description: returns html page for login
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: login
      summary: handles login
      description: handles login form request and responds with a jwt
      requestBody:
        $ref: "#/components/requestBodies/LoginRequestBody"
      responses:
        200:
          $ref: '#/components/responses/LoginResponseBody'
  /register:
    get:
      operationId: registrationPage
      summary: serve registration page
      description: returns html page for registration
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: register
      summary: handles user registration
      description: handles registration form request and responds with home
      requestBody:
        $ref: "#/components/requestBodies/RegisterRequestBody"
      responses:
        200:
          $ref: '#/components/responses/RegistrationResponseBody'
  /page/home:
    get:
      operationId: homePage
      summary: serve home page
      description: returns html page for home
      responses:
        200:
          content:
            text/html:
              schema:
               type: string
  /page/create-group:
    get:
      operationId: createGroupPage
      summary: serve create group page
      description: returns html for creating a new group
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: createGroup
      summary: handles form submit of create group page
      description: handles create group form request and responds with result
      requestBody:
        $ref: "#/components/requestBodies/CreateGroupRequestBody"
      responses:
        200:
          $ref: '#/components/responses/CreateGroupResponseBody'
  /page/create-deck:
    get:
      operationId: createDeckPage
      summary: serve create deck page
      description: returns html for creating a new deck
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: createDeck
      summary: handles form submit of create deck page
      description: handles create deck form request and responds with result
      requestBody:
        $ref: "#/components/requestBodies/CreateDeckRequestBody"
      responses:
        200:
          $ref: '#/components/responses/CreateDeckResponseBody'
  /page/create-cards/{deck_id}:
    get:
      operationId: getCreateCardsForDeckPage
      summary: create cards for deck page
      description: page with form for creating cards on deck
      parameters:
        - name: deck_id
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
    post:
      operationId: createCardForDeck
      summary: handles form submit of create card on create deck page
      description: handles form submit of create card on create deck page
      parameters:
        - name: deck_id
          in: path
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateCardRequestBody"
      responses:
        200:
          headers:
            HX-Trigger:
              schema:
                type: string
          $ref: '#/components/responses/CreateCardResponseBody'
  /page/add-card/{deck_id}:
    get:
      operationId: getCardsForDeck
      summary: card content for deck page
      description: event driven response for card html
      parameters:
        - name: deck_id
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
  /page/group/{groupID}:
    get:
      operationId: groupPage
      summary: serve create group page
      description: returns html for creating a new group
      parameters:
        - name: groupID
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
  /page/front-of-card/{deck_id}/{card_id}:
    get:
      operationId: frontOfCard
      summary: fetches front of card component
      description: returns html for displaying front of card
      parameters:
        - name: deck_id
          in: path
          schema:
              type: string
        - name: card_id
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
  /page/back-of-card/{deck_id}/{card_id}:
    get:
      operationId: backOfCard
      summary: fetches back of card component
      description: returns html for displaying back of card
      parameters:
        - name: deck_id
          in: path
          schema:
            type: string
        - name: card_id
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
  /page/view-deck/{deck_id}:
    get:
      operationId: viewDeck
      summary: fetches view deck page
      description: fetches HTML that represents a deck viewer
      parameters:
        - name: deck_id
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            text/html:
              schema:
                type: string
  /styles/{path}/{style_name}:
    get:
      operationId: serveStyles
      summary: serve css
      description: acts as a handler for css stylesheets
      parameters:
        - name: style_name
          in: path
          schema:
            type: string
        - name: path
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            text/css:
              schema:
                type: string
  /secure/api/v1/groups:
    get:
      operationId: 'getGroups'
      summary: Get Groups
      description: Retrieves paginated list of groups between a given date range
      security:
        - jwt_auth: [ ]
      parameters:
        - name: from
          description: date to start lookup from
          allowEmptyValue: false
          required: true
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          description: date to end lookup
          allowEmptyValue: false
          required: false
          in: query
          schema:
            type: string
            format: date-time
        - name: limit
          description: number of items to return from query
          allowEmptyValue: false
          required: true
          in: query
          schema:
            type: integer
            format: int
        - name: offset
          description: number to start results from
          allowEmptyValue: false
          required: true
          in: query
          schema:
            type: integer
            format: int
      responses:
        200:
          $ref: '#/components/responses/GetGroups'
        400:
          $ref: '#/components/responses/UserError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /secure/api/v1/group:
    post:
      operationId: addGroup
      summary: request to create new group
      description: adds group given a name in the request body
      requestBody:
        $ref: '#/components/requestBodies/AddGroupRequest'
        required: true
      responses:
        201:
          $ref: '#/components/responses/AddGroup'
        400:
          $ref: '#/components/responses/UserError'
        409:
          $ref: '#/components/responses/ConflictError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /secure/api/v1/group/{group_id}/deck/{deck_id}:
    put:
      operationId: addDeckToGroup
      summary: request to add deck to group
      description: adds a deck to a group using ids
      parameters:
        - name: group_id
          in: path
          schema:
            type: string
        - name: deck_id
          in: path
          schema:
            type: string
      responses:
        201:
          $ref: '#/components/responses/AddGroup'
        400:
          $ref: '#/components/responses/UserError'
        409:
          $ref: '#/components/responses/ConflictError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /secure/api/v1/decks:
    get:
      operationId: 'getDecksForUser'
      summary: Gets all decks created by user
      description: Retrieves paginated list of decks between a given date range for a user
      parameters:
        - name: from
          description: date to start lookup from
          allowEmptyValue: false
          required: true
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          description: date to end lookup
          allowEmptyValue: false
          required: false
          in: query
          schema:
            type: string
            format: date-time
        - name: limit
          description: number of items to return from query
          allowEmptyValue: false
          required: true
          in: query
          schema:
            type: integer
            format: int
        - name: offset
          description: number to start results from
          allowEmptyValue: false
          required: true
          in: query
          schema:
            type: integer
            format: int
      responses:
        200:
          $ref: '#/components/responses/GetGroups'
        400:
          $ref: '#/components/responses/UserError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /secure/api/v1/deck:
    post:
      operationId: addDeck
      summary: request to create new deck
      description: adds deck given a name in the request body
      requestBody:
        $ref: '#/components/requestBodies/AddDeckRequest'
        required: true
      responses:
        201:
          $ref: '#/components/responses/AddDeck'
        400:
          $ref: '#/components/responses/UserError'
        409:
          $ref: '#/components/responses/ConflictError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /secure/api/v1/card-input/{card-num}:
    get:
      operationId: getCardInput
      summary: request get retrieve new card section for input
      description: returns HTML section for form input for adding new cards
      parameters:
        - name: card-num
          in: path
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/responses/GetCardInputSectionBody'
components:
  securitySchemes:
    jwt_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    LoginResponseBody:
      description: Response that contains token if user has been authenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponseSchema'
    RegistrationResponseBody:
      description: Response that home page if successful
      content:
        text/html:
          schema:
            type: string
    CreateGroupResponseBody:
      description: Response containing create group page with status
      content:
        text/html:
          schema:
            type: string
    GetCardInputSectionBody:
      description: Response card input section
      content:
        text/html:
          schema:
            type: string
    CreateDeckResponseBody:
      description: Response containing create group page with status
      content:
        text/html:
          schema:
            type: string
    CreateCardResponseBody:
      description: Response containing HX-Trigger
      content:
        text/html:
          schema:
            type: string
    GetGroups:
      description: Successful response object for GetGroups
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GroupWithDecks'
    AddGroup:
      description: response body for successful add group request
      content:
        'text/plain':
          schema:
            $ref: "#/components/schemas/DocumentID"
    AddDeck:
      description: response body for successful add deck request
      content:
        'text/plain':
          schema:
            $ref: "#/components/schemas/DocumentID"

    NotFound:
      description: Response for if/when a resource is not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
    UserError:
      description: Response for if/when a bad request is made by the user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
    ConflictError:
      description: Response for if/when there's a resource exists
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ErrorObject'
    InternalServerError:
      description: Response for if/when there's an unexpected error on the server
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ErrorObject'
  requestBodies:
    LoginRequestBody:
      description: request body for log in
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/Login"
    RegisterRequestBody:
      description: request body for registration
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/Register"
    CreateGroupRequestBody:
      description: request body for create group
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/CreateGroup"
    CreateDeckRequestBody:
      description: request body for adding deck
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/DeckName'
    CreateCardRequestBody:
      description: request body for creating card from deck page
      content:
        'application/x-www-form-urlencoded':
          schema:
            $ref: '#/components/schemas/CardRequest'
    AddGroupRequest:
      description: request body for adding group
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/GroupName'
    AddDeckRequest:
      description: request body for adding deck
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/DeckName'
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Register:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        repassword:
          type: string
      required: [ username, password, repassword ]
    CreateGroup:
      type: object
      properties:
        groupName:
          type: string
      required: [ groupName]
    CreateDeck:
      type: object
      properties:
        deckName:
          type: string
        cards:
          type: array
          items:
            $ref: "#/components/schemas/Card"
      required: [ groupName ]
    LoginResponseSchema:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
    DocumentID:
      type: string
    Card:
      type: 'object'
      properties:
        id:
          type: string
        front:
          type: string
        back:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Deck:
      type: 'object'
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [ id, name, created_at, updated_at ]
    GroupName:
      type: object
      properties:
        group_name:
          type: string
      required: [ group_name ]
    DeckName:
      type: object
      properties:
        deck_name:
          type: string
      required: [ deck_name ]
    CardRequest:
      type: object
      properties:
        deck-id:
          type: string
        card-front:
          type: string
        card-back:
          type: string
    DeckWithCards:
      allOf:
        - $ref: '#/components/schemas/Deck'
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [ id, name, created_at, updated_at ]
    GroupWithDecks:
      allOf:
        - $ref: '#/components/schemas/Group'
        - type: object
          required:
            - decks
          properties:
            decks:
              type: array
              items:
                $ref: '#/components/schemas/Deck'
    ErrorObject:
      type: object
      required: [ statusCode, error, message ]
      properties:
        statusCode:
          type: integer
          description: The HTTP status code for the error (e.g., 500).
          example: 500
        error:
          type: string
          description: A brief error message indicating an internal server error.
          example: Internal Server Error
        message:
          type: string
          description: A detailed message describing the reason for the internal server error.
          example: An unexpected error occurred on the server while processing the request.
