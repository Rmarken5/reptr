// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

const (
	Jwt_authScopes = "jwt_auth.Scopes"
)

// CardRequest defines model for CardRequest.
type CardRequest struct {
	CardBack  *string `json:"card-back,omitempty"`
	CardFront *string `json:"card-front,omitempty"`
	DeckId    *string `json:"deck-id,omitempty"`
}

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	GroupName string `json:"groupName"`
}

// Deck defines model for Deck.
type Deck struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// DeckName defines model for DeckName.
type DeckName struct {
	DeckName string `json:"deck_name"`
}

// DocumentID defines model for DocumentID.
type DocumentID = string

// ErrorObject defines model for ErrorObject.
type ErrorObject struct {
	// Error A brief error message indicating an internal server error.
	Error string `json:"error"`

	// Message A detailed message describing the reason for the internal server error.
	Message string `json:"message"`

	// StatusCode The HTTP status code for the error (e.g., 500).
	StatusCode int `json:"statusCode"`
}

// Group defines model for Group.
type Group struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GroupName defines model for GroupName.
type GroupName struct {
	GroupName string `json:"group_name"`
}

// GroupWithDecks defines model for GroupWithDecks.
type GroupWithDecks struct {
	CreatedAt time.Time `json:"created_at"`
	Decks     []Deck    `json:"decks"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Login defines model for Login.
type Login struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// LoginResponseSchema defines model for LoginResponseSchema.
type LoginResponseSchema struct {
	AccessToken *string `json:"access_token,omitempty"`
	ExpiresIn   *int    `json:"expires_in,omitempty"`
	TokenType   *string `json:"token_type,omitempty"`
}

// Register defines model for Register.
type Register struct {
	Password   string `json:"password"`
	Repassword string `json:"repassword"`
	Username   string `json:"username"`
}

// ConflictError defines model for ConflictError.
type ConflictError = ErrorObject

// GetGroups defines model for GetGroups.
type GetGroups = []GroupWithDecks

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorObject

// LoginResponseBody defines model for LoginResponseBody.
type LoginResponseBody = LoginResponseSchema

// UserError defines model for UserError.
type UserError = ErrorObject

// AddDeckRequest defines model for AddDeckRequest.
type AddDeckRequest = DeckName

// AddGroupRequest defines model for AddGroupRequest.
type AddGroupRequest = GroupName

// CreateDeckRequestBody defines model for CreateDeckRequestBody.
type CreateDeckRequestBody = DeckName

// GetDecksForUserParams defines parameters for GetDecksForUser.
type GetDecksForUserParams struct {
	// From date to start lookup from
	From time.Time `form:"from" json:"from"`

	// To date to end lookup
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Limit number of items to return from query
	Limit int `form:"limit" json:"limit"`

	// Offset number to start results from
	Offset int `form:"offset" json:"offset"`
}

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// From date to start lookup from
	From time.Time `form:"from" json:"from"`

	// To date to end lookup
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Limit number of items to return from query
	Limit int `form:"limit" json:"limit"`

	// Offset number to start results from
	Offset int `form:"offset" json:"offset"`
}

// LoginFormdataRequestBody defines body for Login for application/x-www-form-urlencoded ContentType.
type LoginFormdataRequestBody = Login

// UpdateCardCorrectFormdataRequestBody defines body for UpdateCardCorrect for application/x-www-form-urlencoded ContentType.
type UpdateCardCorrectFormdataRequestBody = CreateGroup

// UpdateCardIncorrectFormdataRequestBody defines body for UpdateCardIncorrect for application/x-www-form-urlencoded ContentType.
type UpdateCardIncorrectFormdataRequestBody = CreateGroup

// CreateCardForDeckFormdataRequestBody defines body for CreateCardForDeck for application/x-www-form-urlencoded ContentType.
type CreateCardForDeckFormdataRequestBody = CardRequest

// CreateDeckJSONRequestBody defines body for CreateDeck for application/json ContentType.
type CreateDeckJSONRequestBody = DeckName

// CreateGroupFormdataRequestBody defines body for CreateGroup for application/x-www-form-urlencoded ContentType.
type CreateGroupFormdataRequestBody = CreateGroup

// RegisterFormdataRequestBody defines body for Register for application/x-www-form-urlencoded ContentType.
type RegisterFormdataRequestBody = Register

// AddDeckJSONRequestBody defines body for AddDeck for application/json ContentType.
type AddDeckJSONRequestBody = DeckName

// AddGroupJSONRequestBody defines body for AddGroup for application/json ContentType.
type AddGroupJSONRequestBody = GroupName

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFavicon request
	GetFavicon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginPage request
	LoginPage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginWithFormdataBody(ctx context.Context, body LoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardsForDeck request
	GetCardsForDeck(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCardCorrectWithBody request with any body
	UpdateCardCorrectWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCardCorrectWithFormdataBody(ctx context.Context, sessionId string, body UpdateCardCorrectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCardIncorrectWithBody request with any body
	UpdateCardIncorrectWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCardIncorrectWithFormdataBody(ctx context.Context, sessionId string, body UpdateCardIncorrectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackOfCard request
	BackOfCard(ctx context.Context, deckId string, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreateCardsForDeckContent request
	GetCreateCardsForDeckContent(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreateCardsForDeckPage request
	GetCreateCardsForDeckPage(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCardForDeckWithBody request with any body
	CreateCardForDeckWithBody(ctx context.Context, deckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCardForDeckWithFormdataBody(ctx context.Context, deckId string, body CreateCardForDeckFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeckPage request
	CreateDeckPage(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeckWithBody request with any body
	CreateDeckWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeck(ctx context.Context, groupId string, body CreateDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGroupPage request
	CreateGroupPage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGroupWithBody request with any body
	CreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGroupWithFormdataBody(ctx context.Context, body CreateGroupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FrontOfCard request
	FrontOfCard(ctx context.Context, deckId string, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupPage request
	GroupPage(ctx context.Context, groupID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HomePage request
	HomePage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewDeck request
	ViewDeck(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VoteCard request
	VoteCard(ctx context.Context, cardId string, direction string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegistrationPage request
	RegistrationPage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterWithBody request with any body
	RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterWithFormdataBody(ctx context.Context, body RegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardInput request
	GetCardInput(ctx context.Context, cardNum int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDeckWithBody request with any body
	AddDeckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDeck(ctx context.Context, body AddDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecksForUser request
	GetDecksForUser(ctx context.Context, params *GetDecksForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddGroupWithBody request with any body
	AddGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddGroup(ctx context.Context, body AddGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDeckToGroup request
	AddDeckToGroup(ctx context.Context, groupId string, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroups request
	GetGroups(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServeStyles request
	ServeStyles(ctx context.Context, path string, styleName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFavicon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFaviconRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginPage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginPageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithFormdataBody(ctx context.Context, body LoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardsForDeck(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardsForDeckRequest(c.Server, deckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCardCorrectWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCardCorrectRequestWithBody(c.Server, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCardCorrectWithFormdataBody(ctx context.Context, sessionId string, body UpdateCardCorrectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCardCorrectRequestWithFormdataBody(c.Server, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCardIncorrectWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCardIncorrectRequestWithBody(c.Server, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCardIncorrectWithFormdataBody(ctx context.Context, sessionId string, body UpdateCardIncorrectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCardIncorrectRequestWithFormdataBody(c.Server, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackOfCard(ctx context.Context, deckId string, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackOfCardRequest(c.Server, deckId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreateCardsForDeckContent(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreateCardsForDeckContentRequest(c.Server, deckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreateCardsForDeckPage(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreateCardsForDeckPageRequest(c.Server, deckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCardForDeckWithBody(ctx context.Context, deckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCardForDeckRequestWithBody(c.Server, deckId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCardForDeckWithFormdataBody(ctx context.Context, deckId string, body CreateCardForDeckFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCardForDeckRequestWithFormdataBody(c.Server, deckId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeckPage(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeckPageRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeckWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeckRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeck(ctx context.Context, groupId string, body CreateDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeckRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroupPage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupPageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroupWithFormdataBody(ctx context.Context, body CreateGroupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FrontOfCard(ctx context.Context, deckId string, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFrontOfCardRequest(c.Server, deckId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupPage(ctx context.Context, groupID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupPageRequest(c.Server, groupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HomePage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHomePageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewDeck(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewDeckRequest(c.Server, deckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoteCard(ctx context.Context, cardId string, direction string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoteCardRequest(c.Server, cardId, direction)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegistrationPage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegistrationPageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithFormdataBody(ctx context.Context, body RegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardInput(ctx context.Context, cardNum int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardInputRequest(c.Server, cardNum)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDeckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDeckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDeck(ctx context.Context, body AddDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDeckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecksForUser(ctx context.Context, params *GetDecksForUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecksForUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGroup(ctx context.Context, body AddGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDeckToGroup(ctx context.Context, groupId string, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDeckToGroupRequest(c.Server, groupId, deckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroups(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServeStyles(ctx context.Context, path string, styleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServeStylesRequest(c.Server, path, styleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFaviconRequest generates requests for GetFavicon
func NewGetFaviconRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/favicon.ico")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginPageRequest generates requests for LoginPage
func NewLoginPageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginRequestWithFormdataBody calls the generic Login builder with application/x-www-form-urlencoded body
func NewLoginRequestWithFormdataBody(server string, body LoginFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLoginRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCardsForDeckRequest generates requests for GetCardsForDeck
func NewGetCardsForDeckRequest(server string, deckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck_id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/add-card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCardCorrectRequestWithFormdataBody calls the generic UpdateCardCorrect builder with application/x-www-form-urlencoded body
func NewUpdateCardCorrectRequestWithFormdataBody(server string, sessionId string, body UpdateCardCorrectFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateCardCorrectRequestWithBody(server, sessionId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateCardCorrectRequestWithBody generates requests for UpdateCardCorrect with any type of body
func NewUpdateCardCorrectRequestWithBody(server string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/answered-correct/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCardIncorrectRequestWithFormdataBody calls the generic UpdateCardIncorrect builder with application/x-www-form-urlencoded body
func NewUpdateCardIncorrectRequestWithFormdataBody(server string, sessionId string, body UpdateCardIncorrectFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateCardIncorrectRequestWithBody(server, sessionId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateCardIncorrectRequestWithBody generates requests for UpdateCardIncorrect with any type of body
func NewUpdateCardIncorrectRequestWithBody(server string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/answered-incorrect/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBackOfCardRequest generates requests for BackOfCard
func NewBackOfCardRequest(server string, deckId string, cardId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck_id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/back-of-card/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCreateCardsForDeckContentRequest generates requests for GetCreateCardsForDeckContent
func NewGetCreateCardsForDeckContentRequest(server string, deckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck_id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/create-cards-content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCreateCardsForDeckPageRequest generates requests for GetCreateCardsForDeckPage
func NewGetCreateCardsForDeckPageRequest(server string, deckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck_id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/create-cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCardForDeckRequestWithFormdataBody calls the generic CreateCardForDeck builder with application/x-www-form-urlencoded body
func NewCreateCardForDeckRequestWithFormdataBody(server string, deckId string, body CreateCardForDeckFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateCardForDeckRequestWithBody(server, deckId, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateCardForDeckRequestWithBody generates requests for CreateCardForDeck with any type of body
func NewCreateCardForDeckRequestWithBody(server string, deckId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck_id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/create-cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDeckPageRequest generates requests for CreateDeckPage
func NewCreateDeckPageRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/create-deck/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeckRequest calls the generic CreateDeck builder with application/json body
func NewCreateDeckRequest(server string, groupId string, body CreateDeckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeckRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewCreateDeckRequestWithBody generates requests for CreateDeck with any type of body
func NewCreateDeckRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/create-deck/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGroupPageRequest generates requests for CreateGroupPage
func NewCreateGroupPageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/create-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGroupRequestWithFormdataBody calls the generic CreateGroup builder with application/x-www-form-urlencoded body
func NewCreateGroupRequestWithFormdataBody(server string, body CreateGroupFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateGroupRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateGroupRequestWithBody generates requests for CreateGroup with any type of body
func NewCreateGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/create-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFrontOfCardRequest generates requests for FrontOfCard
func NewFrontOfCardRequest(server string, deckId string, cardId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck_id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/front-of-card/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupPageRequest generates requests for GroupPage
func NewGroupPageRequest(server string, groupID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupID", runtime.ParamLocationPath, groupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHomePageRequest generates requests for HomePage
func NewHomePageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/home")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewDeckRequest generates requests for ViewDeck
func NewViewDeckRequest(server string, deckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deck_id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/view-deck/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVoteCardRequest generates requests for VoteCard
func NewVoteCardRequest(server string, cardId string, direction string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "direction", runtime.ParamLocationPath, direction)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/page/vote-card/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegistrationPageRequest generates requests for RegistrationPage
func NewRegistrationPageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterRequestWithFormdataBody calls the generic Register builder with application/x-www-form-urlencoded body
func NewRegisterRequestWithFormdataBody(server string, body RegisterFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRegisterRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewRegisterRequestWithBody generates requests for Register with any type of body
func NewRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCardInputRequest generates requests for GetCardInput
func NewGetCardInputRequest(server string, cardNum int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-num", runtime.ParamLocationPath, cardNum)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secure/api/v1/card-input/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddDeckRequest calls the generic AddDeck builder with application/json body
func NewAddDeckRequest(server string, body AddDeckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDeckRequestWithBody(server, "application/json", bodyReader)
}

// NewAddDeckRequestWithBody generates requests for AddDeck with any type of body
func NewAddDeckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secure/api/v1/deck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDecksForUserRequest generates requests for GetDecksForUser
func NewGetDecksForUserRequest(server string, params *GetDecksForUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secure/api/v1/decks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddGroupRequest calls the generic AddGroup builder with application/json body
func NewAddGroupRequest(server string, body AddGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewAddGroupRequestWithBody generates requests for AddGroup with any type of body
func NewAddGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secure/api/v1/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddDeckToGroupRequest generates requests for AddDeckToGroup
func NewAddDeckToGroupRequest(server string, groupId string, deckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deck_id", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secure/api/v1/group/%s/deck/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupsRequest generates requests for GetGroups
func NewGetGroupsRequest(server string, params *GetGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secure/api/v1/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServeStylesRequest generates requests for ServeStyles
func NewServeStylesRequest(server string, path string, styleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "style_name", runtime.ParamLocationPath, styleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/styles/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFaviconWithResponse request
	GetFaviconWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFaviconResponse, error)

	// LoginPageWithResponse request
	LoginPageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginPageResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithFormdataBodyWithResponse(ctx context.Context, body LoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// GetCardsForDeckWithResponse request
	GetCardsForDeckWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*GetCardsForDeckResponse, error)

	// UpdateCardCorrectWithBodyWithResponse request with any body
	UpdateCardCorrectWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCardCorrectResponse, error)

	UpdateCardCorrectWithFormdataBodyWithResponse(ctx context.Context, sessionId string, body UpdateCardCorrectFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateCardCorrectResponse, error)

	// UpdateCardIncorrectWithBodyWithResponse request with any body
	UpdateCardIncorrectWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCardIncorrectResponse, error)

	UpdateCardIncorrectWithFormdataBodyWithResponse(ctx context.Context, sessionId string, body UpdateCardIncorrectFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateCardIncorrectResponse, error)

	// BackOfCardWithResponse request
	BackOfCardWithResponse(ctx context.Context, deckId string, cardId string, reqEditors ...RequestEditorFn) (*BackOfCardResponse, error)

	// GetCreateCardsForDeckContentWithResponse request
	GetCreateCardsForDeckContentWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*GetCreateCardsForDeckContentResponse, error)

	// GetCreateCardsForDeckPageWithResponse request
	GetCreateCardsForDeckPageWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*GetCreateCardsForDeckPageResponse, error)

	// CreateCardForDeckWithBodyWithResponse request with any body
	CreateCardForDeckWithBodyWithResponse(ctx context.Context, deckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCardForDeckResponse, error)

	CreateCardForDeckWithFormdataBodyWithResponse(ctx context.Context, deckId string, body CreateCardForDeckFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateCardForDeckResponse, error)

	// CreateDeckPageWithResponse request
	CreateDeckPageWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*CreateDeckPageResponse, error)

	// CreateDeckWithBodyWithResponse request with any body
	CreateDeckWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeckResponse, error)

	CreateDeckWithResponse(ctx context.Context, groupId string, body CreateDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeckResponse, error)

	// CreateGroupPageWithResponse request
	CreateGroupPageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateGroupPageResponse, error)

	// CreateGroupWithBodyWithResponse request with any body
	CreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error)

	CreateGroupWithFormdataBodyWithResponse(ctx context.Context, body CreateGroupFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error)

	// FrontOfCardWithResponse request
	FrontOfCardWithResponse(ctx context.Context, deckId string, cardId string, reqEditors ...RequestEditorFn) (*FrontOfCardResponse, error)

	// GroupPageWithResponse request
	GroupPageWithResponse(ctx context.Context, groupID string, reqEditors ...RequestEditorFn) (*GroupPageResponse, error)

	// HomePageWithResponse request
	HomePageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HomePageResponse, error)

	// ViewDeckWithResponse request
	ViewDeckWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*ViewDeckResponse, error)

	// VoteCardWithResponse request
	VoteCardWithResponse(ctx context.Context, cardId string, direction string, reqEditors ...RequestEditorFn) (*VoteCardResponse, error)

	// RegistrationPageWithResponse request
	RegistrationPageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RegistrationPageResponse, error)

	// RegisterWithBodyWithResponse request with any body
	RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	RegisterWithFormdataBodyWithResponse(ctx context.Context, body RegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	// GetCardInputWithResponse request
	GetCardInputWithResponse(ctx context.Context, cardNum int, reqEditors ...RequestEditorFn) (*GetCardInputResponse, error)

	// AddDeckWithBodyWithResponse request with any body
	AddDeckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDeckResponse, error)

	AddDeckWithResponse(ctx context.Context, body AddDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDeckResponse, error)

	// GetDecksForUserWithResponse request
	GetDecksForUserWithResponse(ctx context.Context, params *GetDecksForUserParams, reqEditors ...RequestEditorFn) (*GetDecksForUserResponse, error)

	// AddGroupWithBodyWithResponse request with any body
	AddGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddGroupResponse, error)

	AddGroupWithResponse(ctx context.Context, body AddGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AddGroupResponse, error)

	// AddDeckToGroupWithResponse request
	AddDeckToGroupWithResponse(ctx context.Context, groupId string, deckId string, reqEditors ...RequestEditorFn) (*AddDeckToGroupResponse, error)

	// GetGroupsWithResponse request
	GetGroupsWithResponse(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error)

	// ServeStylesWithResponse request
	ServeStylesWithResponse(ctx context.Context, path string, styleName string, reqEditors ...RequestEditorFn) (*ServeStylesResponse, error)
}

type GetFaviconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFaviconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFaviconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponseBody
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardsForDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCardsForDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardsForDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCardCorrectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCardCorrectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCardCorrectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCardIncorrectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCardIncorrectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCardIncorrectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackOfCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BackOfCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackOfCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreateCardsForDeckContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCreateCardsForDeckContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreateCardsForDeckContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreateCardsForDeckPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCreateCardsForDeckPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreateCardsForDeckPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCardForDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCardForDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCardForDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeckPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDeckPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeckPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGroupPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateGroupPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FrontOfCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FrontOfCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FrontOfCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GroupPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HomePageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HomePageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HomePageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ViewDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VoteCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VoteCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VoteCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegistrationPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegistrationPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegistrationPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardInputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCardInputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardInputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *UserError
	JSON409      *ConflictError
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AddDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecksForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGroups
	JSON400      *UserError
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetDecksForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecksForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *UserError
	JSON409      *ConflictError
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AddGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDeckToGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *UserError
	JSON409      *ConflictError
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r AddDeckToGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDeckToGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGroups
	JSON400      *UserError
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServeStylesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ServeStylesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServeStylesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFaviconWithResponse request returning *GetFaviconResponse
func (c *ClientWithResponses) GetFaviconWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFaviconResponse, error) {
	rsp, err := c.GetFavicon(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFaviconResponse(rsp)
}

// LoginPageWithResponse request returning *LoginPageResponse
func (c *ClientWithResponses) LoginPageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginPageResponse, error) {
	rsp, err := c.LoginPage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginPageResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithFormdataBodyWithResponse(ctx context.Context, body LoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// GetCardsForDeckWithResponse request returning *GetCardsForDeckResponse
func (c *ClientWithResponses) GetCardsForDeckWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*GetCardsForDeckResponse, error) {
	rsp, err := c.GetCardsForDeck(ctx, deckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardsForDeckResponse(rsp)
}

// UpdateCardCorrectWithBodyWithResponse request with arbitrary body returning *UpdateCardCorrectResponse
func (c *ClientWithResponses) UpdateCardCorrectWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCardCorrectResponse, error) {
	rsp, err := c.UpdateCardCorrectWithBody(ctx, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCardCorrectResponse(rsp)
}

func (c *ClientWithResponses) UpdateCardCorrectWithFormdataBodyWithResponse(ctx context.Context, sessionId string, body UpdateCardCorrectFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateCardCorrectResponse, error) {
	rsp, err := c.UpdateCardCorrectWithFormdataBody(ctx, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCardCorrectResponse(rsp)
}

// UpdateCardIncorrectWithBodyWithResponse request with arbitrary body returning *UpdateCardIncorrectResponse
func (c *ClientWithResponses) UpdateCardIncorrectWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCardIncorrectResponse, error) {
	rsp, err := c.UpdateCardIncorrectWithBody(ctx, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCardIncorrectResponse(rsp)
}

func (c *ClientWithResponses) UpdateCardIncorrectWithFormdataBodyWithResponse(ctx context.Context, sessionId string, body UpdateCardIncorrectFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateCardIncorrectResponse, error) {
	rsp, err := c.UpdateCardIncorrectWithFormdataBody(ctx, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCardIncorrectResponse(rsp)
}

// BackOfCardWithResponse request returning *BackOfCardResponse
func (c *ClientWithResponses) BackOfCardWithResponse(ctx context.Context, deckId string, cardId string, reqEditors ...RequestEditorFn) (*BackOfCardResponse, error) {
	rsp, err := c.BackOfCard(ctx, deckId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackOfCardResponse(rsp)
}

// GetCreateCardsForDeckContentWithResponse request returning *GetCreateCardsForDeckContentResponse
func (c *ClientWithResponses) GetCreateCardsForDeckContentWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*GetCreateCardsForDeckContentResponse, error) {
	rsp, err := c.GetCreateCardsForDeckContent(ctx, deckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreateCardsForDeckContentResponse(rsp)
}

// GetCreateCardsForDeckPageWithResponse request returning *GetCreateCardsForDeckPageResponse
func (c *ClientWithResponses) GetCreateCardsForDeckPageWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*GetCreateCardsForDeckPageResponse, error) {
	rsp, err := c.GetCreateCardsForDeckPage(ctx, deckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreateCardsForDeckPageResponse(rsp)
}

// CreateCardForDeckWithBodyWithResponse request with arbitrary body returning *CreateCardForDeckResponse
func (c *ClientWithResponses) CreateCardForDeckWithBodyWithResponse(ctx context.Context, deckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCardForDeckResponse, error) {
	rsp, err := c.CreateCardForDeckWithBody(ctx, deckId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCardForDeckResponse(rsp)
}

func (c *ClientWithResponses) CreateCardForDeckWithFormdataBodyWithResponse(ctx context.Context, deckId string, body CreateCardForDeckFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateCardForDeckResponse, error) {
	rsp, err := c.CreateCardForDeckWithFormdataBody(ctx, deckId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCardForDeckResponse(rsp)
}

// CreateDeckPageWithResponse request returning *CreateDeckPageResponse
func (c *ClientWithResponses) CreateDeckPageWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*CreateDeckPageResponse, error) {
	rsp, err := c.CreateDeckPage(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeckPageResponse(rsp)
}

// CreateDeckWithBodyWithResponse request with arbitrary body returning *CreateDeckResponse
func (c *ClientWithResponses) CreateDeckWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeckResponse, error) {
	rsp, err := c.CreateDeckWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeckResponse(rsp)
}

func (c *ClientWithResponses) CreateDeckWithResponse(ctx context.Context, groupId string, body CreateDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeckResponse, error) {
	rsp, err := c.CreateDeck(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeckResponse(rsp)
}

// CreateGroupPageWithResponse request returning *CreateGroupPageResponse
func (c *ClientWithResponses) CreateGroupPageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateGroupPageResponse, error) {
	rsp, err := c.CreateGroupPage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupPageResponse(rsp)
}

// CreateGroupWithBodyWithResponse request with arbitrary body returning *CreateGroupResponse
func (c *ClientWithResponses) CreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error) {
	rsp, err := c.CreateGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateGroupWithFormdataBodyWithResponse(ctx context.Context, body CreateGroupFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error) {
	rsp, err := c.CreateGroupWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupResponse(rsp)
}

// FrontOfCardWithResponse request returning *FrontOfCardResponse
func (c *ClientWithResponses) FrontOfCardWithResponse(ctx context.Context, deckId string, cardId string, reqEditors ...RequestEditorFn) (*FrontOfCardResponse, error) {
	rsp, err := c.FrontOfCard(ctx, deckId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFrontOfCardResponse(rsp)
}

// GroupPageWithResponse request returning *GroupPageResponse
func (c *ClientWithResponses) GroupPageWithResponse(ctx context.Context, groupID string, reqEditors ...RequestEditorFn) (*GroupPageResponse, error) {
	rsp, err := c.GroupPage(ctx, groupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupPageResponse(rsp)
}

// HomePageWithResponse request returning *HomePageResponse
func (c *ClientWithResponses) HomePageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HomePageResponse, error) {
	rsp, err := c.HomePage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHomePageResponse(rsp)
}

// ViewDeckWithResponse request returning *ViewDeckResponse
func (c *ClientWithResponses) ViewDeckWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*ViewDeckResponse, error) {
	rsp, err := c.ViewDeck(ctx, deckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewDeckResponse(rsp)
}

// VoteCardWithResponse request returning *VoteCardResponse
func (c *ClientWithResponses) VoteCardWithResponse(ctx context.Context, cardId string, direction string, reqEditors ...RequestEditorFn) (*VoteCardResponse, error) {
	rsp, err := c.VoteCard(ctx, cardId, direction, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoteCardResponse(rsp)
}

// RegistrationPageWithResponse request returning *RegistrationPageResponse
func (c *ClientWithResponses) RegistrationPageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RegistrationPageResponse, error) {
	rsp, err := c.RegistrationPage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegistrationPageResponse(rsp)
}

// RegisterWithBodyWithResponse request with arbitrary body returning *RegisterResponse
func (c *ClientWithResponses) RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

func (c *ClientWithResponses) RegisterWithFormdataBodyWithResponse(ctx context.Context, body RegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

// GetCardInputWithResponse request returning *GetCardInputResponse
func (c *ClientWithResponses) GetCardInputWithResponse(ctx context.Context, cardNum int, reqEditors ...RequestEditorFn) (*GetCardInputResponse, error) {
	rsp, err := c.GetCardInput(ctx, cardNum, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardInputResponse(rsp)
}

// AddDeckWithBodyWithResponse request with arbitrary body returning *AddDeckResponse
func (c *ClientWithResponses) AddDeckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDeckResponse, error) {
	rsp, err := c.AddDeckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDeckResponse(rsp)
}

func (c *ClientWithResponses) AddDeckWithResponse(ctx context.Context, body AddDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDeckResponse, error) {
	rsp, err := c.AddDeck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDeckResponse(rsp)
}

// GetDecksForUserWithResponse request returning *GetDecksForUserResponse
func (c *ClientWithResponses) GetDecksForUserWithResponse(ctx context.Context, params *GetDecksForUserParams, reqEditors ...RequestEditorFn) (*GetDecksForUserResponse, error) {
	rsp, err := c.GetDecksForUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecksForUserResponse(rsp)
}

// AddGroupWithBodyWithResponse request with arbitrary body returning *AddGroupResponse
func (c *ClientWithResponses) AddGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddGroupResponse, error) {
	rsp, err := c.AddGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGroupResponse(rsp)
}

func (c *ClientWithResponses) AddGroupWithResponse(ctx context.Context, body AddGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AddGroupResponse, error) {
	rsp, err := c.AddGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGroupResponse(rsp)
}

// AddDeckToGroupWithResponse request returning *AddDeckToGroupResponse
func (c *ClientWithResponses) AddDeckToGroupWithResponse(ctx context.Context, groupId string, deckId string, reqEditors ...RequestEditorFn) (*AddDeckToGroupResponse, error) {
	rsp, err := c.AddDeckToGroup(ctx, groupId, deckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDeckToGroupResponse(rsp)
}

// GetGroupsWithResponse request returning *GetGroupsResponse
func (c *ClientWithResponses) GetGroupsWithResponse(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error) {
	rsp, err := c.GetGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsResponse(rsp)
}

// ServeStylesWithResponse request returning *ServeStylesResponse
func (c *ClientWithResponses) ServeStylesWithResponse(ctx context.Context, path string, styleName string, reqEditors ...RequestEditorFn) (*ServeStylesResponse, error) {
	rsp, err := c.ServeStyles(ctx, path, styleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServeStylesResponse(rsp)
}

// ParseGetFaviconResponse parses an HTTP response from a GetFaviconWithResponse call
func ParseGetFaviconResponse(rsp *http.Response) (*GetFaviconResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFaviconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoginPageResponse parses an HTTP response from a LoginPageWithResponse call
func ParseLoginPageResponse(rsp *http.Response) (*LoginPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardsForDeckResponse parses an HTTP response from a GetCardsForDeckWithResponse call
func ParseGetCardsForDeckResponse(rsp *http.Response) (*GetCardsForDeckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardsForDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCardCorrectResponse parses an HTTP response from a UpdateCardCorrectWithResponse call
func ParseUpdateCardCorrectResponse(rsp *http.Response) (*UpdateCardCorrectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCardCorrectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCardIncorrectResponse parses an HTTP response from a UpdateCardIncorrectWithResponse call
func ParseUpdateCardIncorrectResponse(rsp *http.Response) (*UpdateCardIncorrectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCardIncorrectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBackOfCardResponse parses an HTTP response from a BackOfCardWithResponse call
func ParseBackOfCardResponse(rsp *http.Response) (*BackOfCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackOfCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCreateCardsForDeckContentResponse parses an HTTP response from a GetCreateCardsForDeckContentWithResponse call
func ParseGetCreateCardsForDeckContentResponse(rsp *http.Response) (*GetCreateCardsForDeckContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreateCardsForDeckContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCreateCardsForDeckPageResponse parses an HTTP response from a GetCreateCardsForDeckPageWithResponse call
func ParseGetCreateCardsForDeckPageResponse(rsp *http.Response) (*GetCreateCardsForDeckPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreateCardsForDeckPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCardForDeckResponse parses an HTTP response from a CreateCardForDeckWithResponse call
func ParseCreateCardForDeckResponse(rsp *http.Response) (*CreateCardForDeckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCardForDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDeckPageResponse parses an HTTP response from a CreateDeckPageWithResponse call
func ParseCreateDeckPageResponse(rsp *http.Response) (*CreateDeckPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeckPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDeckResponse parses an HTTP response from a CreateDeckWithResponse call
func ParseCreateDeckResponse(rsp *http.Response) (*CreateDeckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateGroupPageResponse parses an HTTP response from a CreateGroupPageWithResponse call
func ParseCreateGroupPageResponse(rsp *http.Response) (*CreateGroupPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGroupPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateGroupResponse parses an HTTP response from a CreateGroupWithResponse call
func ParseCreateGroupResponse(rsp *http.Response) (*CreateGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFrontOfCardResponse parses an HTTP response from a FrontOfCardWithResponse call
func ParseFrontOfCardResponse(rsp *http.Response) (*FrontOfCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FrontOfCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGroupPageResponse parses an HTTP response from a GroupPageWithResponse call
func ParseGroupPageResponse(rsp *http.Response) (*GroupPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHomePageResponse parses an HTTP response from a HomePageWithResponse call
func ParseHomePageResponse(rsp *http.Response) (*HomePageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HomePageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseViewDeckResponse parses an HTTP response from a ViewDeckWithResponse call
func ParseViewDeckResponse(rsp *http.Response) (*ViewDeckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVoteCardResponse parses an HTTP response from a VoteCardWithResponse call
func ParseVoteCardResponse(rsp *http.Response) (*VoteCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VoteCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRegistrationPageResponse parses an HTTP response from a RegistrationPageWithResponse call
func ParseRegistrationPageResponse(rsp *http.Response) (*RegistrationPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegistrationPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRegisterResponse parses an HTTP response from a RegisterWithResponse call
func ParseRegisterResponse(rsp *http.Response) (*RegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCardInputResponse parses an HTTP response from a GetCardInputWithResponse call
func ParseGetCardInputResponse(rsp *http.Response) (*GetCardInputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardInputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddDeckResponse parses an HTTP response from a AddDeckWithResponse call
func ParseAddDeckResponse(rsp *http.Response) (*AddDeckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDecksForUserResponse parses an HTTP response from a GetDecksForUserWithResponse call
func ParseGetDecksForUserResponse(rsp *http.Response) (*GetDecksForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecksForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddGroupResponse parses an HTTP response from a AddGroupWithResponse call
func ParseAddGroupResponse(rsp *http.Response) (*AddGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddDeckToGroupResponse parses an HTTP response from a AddDeckToGroupWithResponse call
func ParseAddDeckToGroupResponse(rsp *http.Response) (*AddDeckToGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddDeckToGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGroupsResponse parses an HTTP response from a GetGroupsWithResponse call
func ParseGetGroupsResponse(rsp *http.Response) (*GetGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseServeStylesResponse parses an HTTP response from a ServeStylesWithResponse call
func ParseServeStylesResponse(rsp *http.Response) (*ServeStylesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServeStylesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// favicon image
	// (GET /favicon.ico)
	GetFavicon(w http.ResponseWriter, r *http.Request)
	// serve login page
	// (GET /login)
	LoginPage(w http.ResponseWriter, r *http.Request)
	// handles login
	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request)
	// card content for deck page
	// (GET /page/add-card/{deck_id})
	GetCardsForDeck(w http.ResponseWriter, r *http.Request, deckId string)
	// handles updating card in session and returns next card in deck
	// (POST /page/answered-correct/{session_id})
	UpdateCardCorrect(w http.ResponseWriter, r *http.Request, sessionId string)
	// handles updating card in session and returns next card in deck
	// (POST /page/answered-incorrect/{session_id})
	UpdateCardIncorrect(w http.ResponseWriter, r *http.Request, sessionId string)
	// fetches back of card component
	// (GET /page/back-of-card/{deck_id}/{card_id})
	BackOfCard(w http.ResponseWriter, r *http.Request, deckId string, cardId string)
	// create cards for deck page
	// (GET /page/create-cards-content/{deck_id})
	GetCreateCardsForDeckContent(w http.ResponseWriter, r *http.Request, deckId string)
	// create cards for deck page
	// (GET /page/create-cards/{deck_id})
	GetCreateCardsForDeckPage(w http.ResponseWriter, r *http.Request, deckId string)
	// handles form submit of create card on create deck page
	// (POST /page/create-cards/{deck_id})
	CreateCardForDeck(w http.ResponseWriter, r *http.Request, deckId string)
	// serve create deck page
	// (GET /page/create-deck/{group_id})
	CreateDeckPage(w http.ResponseWriter, r *http.Request, groupId string)
	// handles form submit of create deck page
	// (POST /page/create-deck/{group_id})
	CreateDeck(w http.ResponseWriter, r *http.Request, groupId string)
	// serve create group page
	// (GET /page/create-group)
	CreateGroupPage(w http.ResponseWriter, r *http.Request)
	// handles form submit of create group page
	// (POST /page/create-group)
	CreateGroup(w http.ResponseWriter, r *http.Request)
	// fetches front of card component
	// (GET /page/front-of-card/{deck_id}/{card_id})
	FrontOfCard(w http.ResponseWriter, r *http.Request, deckId string, cardId string)
	// serve create group page
	// (GET /page/group/{groupID})
	GroupPage(w http.ResponseWriter, r *http.Request, groupID string)
	// serve home page
	// (GET /page/home)
	HomePage(w http.ResponseWriter, r *http.Request)
	// fetches view deck page
	// (GET /page/view-deck/{deck_id})
	ViewDeck(w http.ResponseWriter, r *http.Request, deckId string)
	// Handles card voting from User
	// (PUT /page/vote-card/{card_id}/{direction})
	VoteCard(w http.ResponseWriter, r *http.Request, cardId string, direction string)
	// serve registration page
	// (GET /register)
	RegistrationPage(w http.ResponseWriter, r *http.Request)
	// handles user registration
	// (POST /register)
	Register(w http.ResponseWriter, r *http.Request)
	// request get retrieve new card section for input
	// (GET /secure/api/v1/card-input/{card-num})
	GetCardInput(w http.ResponseWriter, r *http.Request, cardNum int)
	// request to create new deck
	// (POST /secure/api/v1/deck)
	AddDeck(w http.ResponseWriter, r *http.Request)
	// Gets all decks created by user
	// (GET /secure/api/v1/decks)
	GetDecksForUser(w http.ResponseWriter, r *http.Request, params GetDecksForUserParams)
	// request to create new group
	// (POST /secure/api/v1/group)
	AddGroup(w http.ResponseWriter, r *http.Request)
	// request to add deck to group
	// (PUT /secure/api/v1/group/{group_id}/deck/{deck_id})
	AddDeckToGroup(w http.ResponseWriter, r *http.Request, groupId string, deckId string)
	// Get Groups
	// (GET /secure/api/v1/groups)
	GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams)
	// serve css
	// (GET /styles/{path}/{style_name})
	ServeStyles(w http.ResponseWriter, r *http.Request, path string, styleName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetFavicon operation middleware
func (siw *ServerInterfaceWrapper) GetFavicon(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFavicon(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginPage operation middleware
func (siw *ServerInterfaceWrapper) LoginPage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginPage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCardsForDeck operation middleware
func (siw *ServerInterfaceWrapper) GetCardsForDeck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deck_id" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deck_id", mux.Vars(r)["deck_id"], &deckId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deck_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCardsForDeck(w, r, deckId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCardCorrect operation middleware
func (siw *ServerInterfaceWrapper) UpdateCardCorrect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", mux.Vars(r)["session_id"], &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "session_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCardCorrect(w, r, sessionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCardIncorrect operation middleware
func (siw *ServerInterfaceWrapper) UpdateCardIncorrect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", mux.Vars(r)["session_id"], &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "session_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCardIncorrect(w, r, sessionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// BackOfCard operation middleware
func (siw *ServerInterfaceWrapper) BackOfCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deck_id" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deck_id", mux.Vars(r)["deck_id"], &deckId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deck_id", Err: err})
		return
	}

	// ------------- Path parameter "card_id" -------------
	var cardId string

	err = runtime.BindStyledParameterWithOptions("simple", "card_id", mux.Vars(r)["card_id"], &cardId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "card_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BackOfCard(w, r, deckId, cardId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreateCardsForDeckContent operation middleware
func (siw *ServerInterfaceWrapper) GetCreateCardsForDeckContent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deck_id" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deck_id", mux.Vars(r)["deck_id"], &deckId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deck_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreateCardsForDeckContent(w, r, deckId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreateCardsForDeckPage operation middleware
func (siw *ServerInterfaceWrapper) GetCreateCardsForDeckPage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deck_id" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deck_id", mux.Vars(r)["deck_id"], &deckId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deck_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreateCardsForDeckPage(w, r, deckId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCardForDeck operation middleware
func (siw *ServerInterfaceWrapper) CreateCardForDeck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deck_id" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deck_id", mux.Vars(r)["deck_id"], &deckId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deck_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCardForDeck(w, r, deckId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateDeckPage operation middleware
func (siw *ServerInterfaceWrapper) CreateDeckPage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", mux.Vars(r)["group_id"], &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDeckPage(w, r, groupId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateDeck operation middleware
func (siw *ServerInterfaceWrapper) CreateDeck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", mux.Vars(r)["group_id"], &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDeck(w, r, groupId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGroupPage operation middleware
func (siw *ServerInterfaceWrapper) CreateGroupPage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGroupPage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGroup(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FrontOfCard operation middleware
func (siw *ServerInterfaceWrapper) FrontOfCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deck_id" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deck_id", mux.Vars(r)["deck_id"], &deckId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deck_id", Err: err})
		return
	}

	// ------------- Path parameter "card_id" -------------
	var cardId string

	err = runtime.BindStyledParameterWithOptions("simple", "card_id", mux.Vars(r)["card_id"], &cardId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "card_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FrontOfCard(w, r, deckId, cardId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GroupPage operation middleware
func (siw *ServerInterfaceWrapper) GroupPage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GroupPage(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// HomePage operation middleware
func (siw *ServerInterfaceWrapper) HomePage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HomePage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ViewDeck operation middleware
func (siw *ServerInterfaceWrapper) ViewDeck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deck_id" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deck_id", mux.Vars(r)["deck_id"], &deckId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deck_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ViewDeck(w, r, deckId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoteCard operation middleware
func (siw *ServerInterfaceWrapper) VoteCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "card_id" -------------
	var cardId string

	err = runtime.BindStyledParameterWithOptions("simple", "card_id", mux.Vars(r)["card_id"], &cardId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "card_id", Err: err})
		return
	}

	// ------------- Path parameter "direction" -------------
	var direction string

	err = runtime.BindStyledParameterWithOptions("simple", "direction", mux.Vars(r)["direction"], &direction, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "direction", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoteCard(w, r, cardId, direction)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegistrationPage operation middleware
func (siw *ServerInterfaceWrapper) RegistrationPage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegistrationPage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCardInput operation middleware
func (siw *ServerInterfaceWrapper) GetCardInput(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "card-num" -------------
	var cardNum int

	err = runtime.BindStyledParameterWithOptions("simple", "card-num", mux.Vars(r)["card-num"], &cardNum, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "card-num", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCardInput(w, r, cardNum)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddDeck operation middleware
func (siw *ServerInterfaceWrapper) AddDeck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddDeck(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDecksForUser operation middleware
func (siw *ServerInterfaceWrapper) GetDecksForUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDecksForUserParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDecksForUser(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGroup operation middleware
func (siw *ServerInterfaceWrapper) AddGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGroup(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddDeckToGroup operation middleware
func (siw *ServerInterfaceWrapper) AddDeckToGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", mux.Vars(r)["group_id"], &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	// ------------- Path parameter "deck_id" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deck_id", mux.Vars(r)["deck_id"], &deckId, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deck_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddDeckToGroup(w, r, groupId, deckId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Jwt_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroups(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ServeStyles operation middleware
func (siw *ServerInterfaceWrapper) ServeStyles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", mux.Vars(r)["path"], &path, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Path parameter "style_name" -------------
	var styleName string

	err = runtime.BindStyledParameterWithOptions("simple", "style_name", mux.Vars(r)["style_name"], &styleName, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "style_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServeStyles(w, r, path, styleName)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/favicon.ico", wrapper.GetFavicon).Methods("GET")

	r.HandleFunc(options.BaseURL+"/login", wrapper.LoginPage).Methods("GET")

	r.HandleFunc(options.BaseURL+"/login", wrapper.Login).Methods("POST")

	r.HandleFunc(options.BaseURL+"/page/add-card/{deck_id}", wrapper.GetCardsForDeck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/answered-correct/{session_id}", wrapper.UpdateCardCorrect).Methods("POST")

	r.HandleFunc(options.BaseURL+"/page/answered-incorrect/{session_id}", wrapper.UpdateCardIncorrect).Methods("POST")

	r.HandleFunc(options.BaseURL+"/page/back-of-card/{deck_id}/{card_id}", wrapper.BackOfCard).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/create-cards-content/{deck_id}", wrapper.GetCreateCardsForDeckContent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/create-cards/{deck_id}", wrapper.GetCreateCardsForDeckPage).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/create-cards/{deck_id}", wrapper.CreateCardForDeck).Methods("POST")

	r.HandleFunc(options.BaseURL+"/page/create-deck/{group_id}", wrapper.CreateDeckPage).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/create-deck/{group_id}", wrapper.CreateDeck).Methods("POST")

	r.HandleFunc(options.BaseURL+"/page/create-group", wrapper.CreateGroupPage).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/create-group", wrapper.CreateGroup).Methods("POST")

	r.HandleFunc(options.BaseURL+"/page/front-of-card/{deck_id}/{card_id}", wrapper.FrontOfCard).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/group/{groupID}", wrapper.GroupPage).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/home", wrapper.HomePage).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/view-deck/{deck_id}", wrapper.ViewDeck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/page/vote-card/{card_id}/{direction}", wrapper.VoteCard).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/register", wrapper.RegistrationPage).Methods("GET")

	r.HandleFunc(options.BaseURL+"/register", wrapper.Register).Methods("POST")

	r.HandleFunc(options.BaseURL+"/secure/api/v1/card-input/{card-num}", wrapper.GetCardInput).Methods("GET")

	r.HandleFunc(options.BaseURL+"/secure/api/v1/deck", wrapper.AddDeck).Methods("POST")

	r.HandleFunc(options.BaseURL+"/secure/api/v1/decks", wrapper.GetDecksForUser).Methods("GET")

	r.HandleFunc(options.BaseURL+"/secure/api/v1/group", wrapper.AddGroup).Methods("POST")

	r.HandleFunc(options.BaseURL+"/secure/api/v1/group/{group_id}/deck/{deck_id}", wrapper.AddDeckToGroup).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/secure/api/v1/groups", wrapper.GetGroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/styles/{path}/{style_name}", wrapper.ServeStyles).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbbW/byBH+Kwu2QFtAMp22Aa76lnMuiYtrEzjOXYHAMFbkSNqY3OXtLi0Lhv57MbPL",
	"N3FpU7Kd5HL5JonkzrPz8szscHQbJSovlARpTTS7jTT8VoKxP6pUAP3wIk1fQnJ15n7HXxIlLUj6yIsi",
	"Ewm3Qsn4k1ESfzPJCnKOn/6sYRHNoj/FjYjYXTUxrvlfnkO03W4nUQom0aLAdaJZhYHNVbphC6UZT1Mh",
	"lyyF5CraThDSa63K4rEx0aL7glriQ4jqRAO3cMJ1elbrcHMHtpvper2eLpTOp6XOQCYqhXQ82JagUXAT",
	"hIeAE65TttAqJ32ygi+hgd8y9T3wP5+5HbK2xZ9Ys4288ZoF7wgTui40CrS6hO0k+lkthfwsyEnSKMyZ",
	"WjIhQ2jPYCmMBf1ZAFfCRmHWdLMmwX3kW/zFFEqaDm/tYLdwY+Mi42If31VJmYO0py/DMJ3QBqcpkwSM",
	"WZQZerKLMl1FasNeXx4ZeWwb2omSi0wk9ietlX602KfV3s4/QRJkqrMKJiIUi3i9AsnsCjT8xTDONBhV",
	"6gQY3AhjzS7TumcDXkr6XNk86wK1mwKiWWSsFnJ5JxxciwuJTPTmf9NzLZZLdNQuU34W8W2CIb5ma2FX",
	"zFhuS9NjyK8D0muwaKBTWZT2PSS41JNAwmQmUAgzTooXTsowe/mwsJCbUTXCr8Ku0P60Uw+Wa803Iazv",
	"m6CrI1JRNJDHN1i3k+hUWtCSZ+9BX4P+isJQslLCTQGJhZQBrsQUXWaGoEZNnhv0v8Ohd1Z+7x65awt2",
	"xW3lrYZZdQWSiQUrDWi24obNASTjpV2BtIgI0qjOfC6/PGUYEbqVysEFjli0eBlxfDBfg+k5m/O0Sg5M",
	"GJbzFNh8Q0ZHTUa4kJeAANoF6ew2KrQqQFt/isA4nc65y8c7qpq4qwutvIJ3L2MGnYo0pOU6/JTfXYcM",
	"+ziWdYkfXKypKT62br0ISKlqi51tkuz0ktNGsCzCT1HKLUytyCGa9HcX3NgkkmGQk6gs0j1l7GxMpJFf",
	"ftIG3Fl5aMuV6rrbRgNdylFabW4NimgKmtDW237cAwFVyHSd+wWbawELT1o5GENBJ1MKJblEbhOedj2Z",
	"uXuPokkENzwvMgRRMTNz1MxcgAbM6SWEgKRgucggrVG4G+aIAqNKAzdKUhTi1xGoXoR4OUlKrSHtEjRb",
	"r0QGrNAKmaaRSPF6FNqIy+UnKg3s5XwF7M35+Tuf8BmW/TVuB+OvcLQ8mrDnx8d/62B+fnxcC8MdLj2T",
	"tJ2kJXri7dooNuQ3A9H+TYfj6zaVBVhuZEC27h2U0tQ7mIay7O0imn0cUSdF20mIKszoauulbwHs1Fh9",
	"SjEB8BdVTdJXUMGNWSsdNjUmt2Hd9TQUKk56Ajkl+EsqRYJC4aYQGsylaF+u42MS0ZOX7vdRsOqj9X6b",
	"1/AA3bStUt85aQR2lu8bDEkHklILuyE9Orif1vYSazX8PAeuQb+qguzfv55HvgbBddzVJuBW1voOjpAL",
	"1WexMyisZi/enbIq71S9BSss8Wt9RzSJrkEb99yzo+OjY9SGKkDyQkSz6B9Hz46Oaat2RajjBb8WiZJH",
	"IiHJS7B9AEuwhvkbmciR3WhRV4OeptEMjzKv3A3RToPj78fHB1ampOgyz7neRLOoKx+vxVkVNUHUGmyp",
	"pWEoyZWwvqNEDaUufAqOd25jT4KespsTXrcyC2UCsFdcphkYfy8SdV3dcpn6s1lq3EGWs09rG96Nbz21",
	"emMhBuv00eNeC3AbVkd4JX9f3D9gdXXR2aGzJKok5mk6xRI7vqXqS6TbQdvCNUjLUi2uQTbHVepy4kmb",
	"zBNwUaz9zSulia8xCjTPwYI2lCfQlygyqkQ3izyQKnqDlr54IpehnfhVaGutPnijM2nWoCGdJkprSGx8",
	"a7BuUrJS391ORrm77rYLyfzT3tVcAEm4sfUNqVNdV7UfqARA7Z44GKOU2yC9X797OvJAL77vzs/ud+eh",
	"rlXYqQ/UaMCiQn4lNj2tgHy36sFWnfPkaqoWO/wW3+L3O5muk8WIBYQpMr5BMLgoUwuS2bPfjzy5ers4",
	"cZceh+kmwSf9Fr4IRy7AJiswHU2w2t4t/bsTC6nfTL3YEXmmaRlTIu69oDR4eg2GD2abuv9f5ZwTv9+v",
	"PvW4trnb4VDqaav086vSF2u/Xz3eV/+Rlkw5z4Ulz26WQkX5r816u0prNPYk9c5BzL07dHBQdTnwVi3M",
	"23sqsefceCm+db2HvVi6dm3OJKzDft28oAs7M88ytf4pL+zmF56V4F4gT0JmqwB+ESd3R5u+Lu9z8PYT",
	"9xxzNJgys3cocJRzj9fSQd69O5PyAO/uvbTdx7vvcOdl1X88yImryZGQEaiQevoDdO997mg3c488xM9e",
	"twZnnqZsPX7ssjXsIG3t1R5Cr7UevUKlVQdL1Fd49Q9To3Z0ESxSyTA+3Zy+3D5yoLZDdCRZnr788hkl",
	"6K0r5Xq7ezT+6JFdnbxROTw9a9Uv0Vs7uBaw9uXFvaVz5UFvzv/zs3str6HQYJAbGHeEj+tRU7m7wV8E",
	"rH8X3a5qj7iPYAq7Vv6w0VBSfJsK7cZpXF+kDCjvZMXlEvMARh0u4oZKPxjQR+ysPrqv3TU/nXPUV6Ry",
	"RecoRY6hmzBR1Rv6IkZ4U+VMrytP4U5bzha69b5mj+jbGYrs6rY90fL00diGMrKG6DxyTw0R5Jn6LdcB",
	"5UNo0vWg2mFwcGig52Vgx27kAPTqC2JeiPj6WUwjMTTY5sJyKsv8/sRFROZDjdyDdOrm41qT1RiVdHYe",
	"6uXT2N7oiERsobBqXu9fHKLWoRHCrlYrh1kCsrfVAq6h3mBHF6SGkK7TapYn6Ks8TY0jziW9FeEMt86E",
	"bE9Q0IxtT5vVDPIBzrnzt4uDWrGV+O0k+ucYhTeDZ/TEv0ZUzZ2B4e0kej5GTmjKMWxUq6pqpT7sD9jP",
	"DMbGmXcKg5wkJLeQskwYqhjpSTYHu6aJQG/hFAVqzG4uaNy4WyBUaCbildIf3PWdaOnCoEWtYsZybVmm",
	"1BUem7TCyKG4+q0EvWkCy1/qTrm3g2zcqMkQDJCpBzEg36ro4dJkmc9Bo6Zp3AMFO6py2a8SGZKfiVzY",
	"cQoQ1PntzxQNoKmN4E6l5i4rqMXCwMNgHMp9zVTw/sH7SGH4GrAOzjIfJ346ic03zQDoTijWjZA7uNQd",
	"PA4h04M7Bbv/GDuUTquppm+DT/1f1was2GrPxv3zVPBIQOb15yarkE/J1CXNG4pAueEz1LmqLPtIzcbJ",
	"Ix7D/jCeUf9Zyap7XOOwZOsevSPbhlKsZ8HvyfV7cv02kqsfcCQnbkYbP17gVjqZl1UYKQjtJgMT3yKh",
	"beNb+kpDu8NnQp5g8kY+dgdP7TqaxjC32ArA9hmZ8L6nG8ZNpdRIDiBk/+3B/ZjEmEP6oMa46VA3Ie+2",
	"WOrMT47O4jhTCc9WytjZD8c/PIuj7cX2/wEAAP//Qt78rzA/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
